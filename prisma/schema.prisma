// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    favorites     Favorite[]
    Category      Category[]
    Label         Label[]
}

model VerificationToken {
    identifier String   @id @default(auto()) @map("_id") @db.ObjectId
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category {
    id          String     @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String
    slug        String     @unique
    cover       String
    color       String
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    favorites   Favorite[]
    creator     User       @relation(fields: [creatorId], references: [id])
    creatorId   String     @db.ObjectId

    @@unique([id, creatorId])
}

model Favorite {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String
    slug        String @unique
    cover       String
    link        String

    createdAt  DateTime       @default(now())
    updatedAt  DateTime       @updatedAt
    status     FavoriteStatus @default(UNFAVORED)
    category   Category       @relation(fields: [categoryId], references: [id])
    categoryId String         @db.ObjectId
    creator    User           @relation(fields: [creatorId], references: [id])
    creatorId  String         @db.ObjectId
    labelIDs   String[]       @db.ObjectId
    labels     Label[]        @relation(fields: [labelIDs], references: [id])

    @@unique([id, categoryId, creatorId])
}

enum FavoriteStatus {
    UNFAVORED
    FAVORED
}

model Label {
    id   String @id @default(auto()) @map("_id") @db.ObjectId
    name String @unique

    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    favoriteIDs String[]   @db.ObjectId
    favorites   Favorite[] @relation(fields: [favoriteIDs], references: [id])
    creator     User       @relation(fields: [creatorId], references: [id])
    creatorId   String     @db.ObjectId

    @@unique([id, creatorId])
}
